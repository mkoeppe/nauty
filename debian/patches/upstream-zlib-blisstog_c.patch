Description: implement zlib support to blisstog utility
 zlib is implemented to handle directly flate and compress files
 for the blisstog nauty tool.
Origin: debian
Author: Jerome Benoit <calculus@rezozer.net>
Last-Update: 2013-11-25

--- a/blisstog.c
+++ b/blisstog.c
@@ -6,45 +6,39 @@
 " Read files of graphs in Bliss (Dimacs) format and write\n\
   them to stdout in sparse6 format.\n"
 
-#define ZCAT "gunzip -c"  /* name of zcat command (might be "gunzip -c") */
-
 /*************************************************************************/
 
-#include "gtools.h" 
+#include <zlib.h>
+
+#include "gtools.h"
 
-typedef struct 
+#define BUFSIZE 256
+
+typedef struct
 {
    int v,w;
 } vpair;
 
-static int
-nextchar(FILE *f)
-{
-    char s[2];
-
-    if (fscanf(f,"%1s",s) != 1) return EOF;
-    else                        return s[0];
-}
-
 static boolean
-readblissgraph(FILE *f, sparsegraph *g)
+readblissgraph(gzFile f, sparsegraph *g)
 /* Reads a graph from Bliss format into a sparse graph */
 {
-    int n,c;
+    int n;
     unsigned long ne,j;
     int haven;
     int i,v,w;
-    int haveptn;
     DYNALLSTAT(vpair,elist,elist_sz);
+		char buffer[BUFSIZE];
+
+		memset(buffer,'\0',BUFSIZE);
 
     haven = 0;
     j = 0;
-    while ((c = nextchar(f)) >= 0)
+		while (((gzgets(f,buffer,BUFSIZE)) != NULL) && (strlen(buffer) < (BUFSIZE-1)))
     {
-	switch (c)
+	switch (*buffer)
 	{
 	case 'c':
-	    while ((c = getc(f)) != '\n' && c != EOF) {}
 	    break;
 
 	case 'p':
@@ -53,7 +47,7 @@
 		fprintf(stderr,"Duplicate p line\n");
 		exit(1);
 	    }
-	    if (fscanf(f," edge %d %lu",&n,&ne) != 2)
+	    if (sscanf(buffer,"p edge %d %lu",&n,&ne) != 2)
 	    {
 		fprintf(stderr,"Bad p line\n");
 		return FALSE;
@@ -67,8 +61,8 @@
 	    {
                 fprintf(stderr,"Missing p line\n");
                 return FALSE;
-            }  
-            if (fscanf(f,"%d%d",&w,&v) != 2 || w < 1 || w > n)
+            }
+            if (sscanf(buffer,"n %d%d",&w,&v) != 2 || w < 1 || w > n)
             {
                 fprintf(stderr,"Bad n line\n");
                 return FALSE;
@@ -81,7 +75,7 @@
 		fprintf(stderr,"Missing p line or too many e lines\n");
 		return FALSE;
 	    }
-	    if (fscanf(f,"%d%d",&v,&w) != 2 || v < 1 || w < 1 || v > n || w > n)
+	    if (sscanf(buffer,"e %d%d",&v,&w) != 2 || v < 1 || w < 1 || v > n || w > n)
 	    {
 		fprintf(stderr,"Bad e line\n");
 		return FALSE;
@@ -91,10 +85,20 @@
 	    break;
 
 	default:
-	    fprintf(stderr,"Unknown line %c\n",c);
+	    fprintf(stderr,"Unknown line\n");
 	    return FALSE;
 	}
     }
+	if (errno)
+	{
+  	fprintf(stderr,"Corrupted data file\n");
+    return FALSE;
+	}
+	else if (strlen(buffer) == (BUFSIZE-1))
+	{
+  	fprintf(stderr,"Corrupted data line\n");
+    return FALSE;
+	}
 
     if (j != ne)
     {
@@ -107,7 +111,7 @@
     g->nde = 2*ne;
 
     for (i = 0; i < n; ++i) g->d[i] = 0;
-    for (j = 0; j < ne; ++j) 
+    for (j = 0; j < ne; ++j)
     {
 	++(g->d[elist[j].v]);
 	++(g->d[elist[j].w]);
@@ -116,7 +120,7 @@
     for (i = 1; i < n; ++i) g->v[i] = g->v[i-1] + g->d[i-1];
     for (i = 0; i < n; ++i) g->d[i] = 0;
 
-    for (j = 0; j < ne; ++j) 
+    for (j = 0; j < ne; ++j)
     {
 	v = elist[j].v;
 	w = elist[j].w;
@@ -132,63 +136,53 @@
 int
 main(int argc, char *argv[])
 {
-    FILE *infile;
+    gzFile infile;
     int j;
     SG_DECL(g);
-    size_t flen;
-    boolean ispipe;
-    char zcmd[515];
 
     HELP;
 
-    if (argc == 1)
-    {
-	if (!readblissgraph(stdin,&g))
-	{
-	    fprintf(stderr,">E Bliss error in file %s\n","stdin");
-	    gt_abort(NULL);
-	}
-	else
-	    writes6_sg(stdout,&g);
-    }
-    else
-    {
-        for (j = 1; j < argc; ++j)
-	{
-	    flen = strlen(argv[j]);
-            if (flen >= 3 && strcmp(argv[j]+flen-3,".gz") == 0)
-            {
-                sprintf(zcmd,"%s \"%s\"",ZCAT,argv[j]);
-                if ((infile = popen(zcmd,"r")) == NULL)
-                {
-                    fprintf(stderr,
-                         ">E blisstog: cannot open zcat pipe for \"%s\"\n",
-                         argv[j]);
-                    gt_abort(NULL);
-                }
-		ispipe = TRUE;
-            }
-            else
-            {
-	        if ((infile = fopen(argv[j],"r")) == NULL)
-	        {
-	            fprintf(stderr,">E Can't open file %s\n",argv[j]);
-		    gt_abort(NULL);
-	        }
-		ispipe = FALSE;
-	    }
-
-	    if (!readblissgraph(infile,&g))
-	    {
-	        fprintf(stderr,">E Bliss error in file %s\n",argv[j]);
-		gt_abort(NULL);
-	    }
-	    else
-	        writes6_sg(stdout,&g);
+		if (argc == 1)
+		{
+			if ((infile = gzdopen(STDIN_FILENO,"r")) == NULL)
+			{
+				fprintf(stderr,">E Can't open stdin\n");
+				gt_abort(NULL);
+			}
+			else
+			{
+				if (!readblissgraph(infile,&g))
+				{
+					fprintf(stderr,">E Bliss error in stdin\n");
+					gt_abort(NULL);
+				}
+				else
+					writes6_sg(stdout,&g);
+			gzclose(infile);
+			}
+		}
+		else
+		{
+			for (j = 1; j < argc; ++j)
+			{
+				if ((infile = gzopen(argv[j],"r")) == NULL)
+				{
+					fprintf(stderr,">E Can't open file %s\n",argv[j]);
+					gt_abort(NULL);
+				}
+				else
+				{
+					if (!readblissgraph(infile,&g))
+					{
+						fprintf(stderr,">E Bliss error in file %s\n",argv[j]);
+						gt_abort(NULL);
+					}
+					else
+						writes6_sg(stdout,&g);
+				gzclose(infile);
+				}
+			}
+		}
 
-	    if (ispipe) pclose(infile); else fclose(infile);
-        }
-    }
-
-    exit(0);
-}    
+		exit(0);
+}
